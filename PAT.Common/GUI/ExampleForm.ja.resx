<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="RadioButton_Partial.ToolTip" xml:space="preserve">
    <value>このオプションがなければ、すべてのイベントが公平です、そして、その結果、処理レベル公平性は達成されます。</value>
  </data>
  <data name="Label_CreatedAt.Text" xml:space="preserve">
    <value>サンプル作成日:</value>
  </data>
  <data name="GroupBox_Description.Text" xml:space="preserve">
    <value>サンプルの説明</value>
  </data>
  <data name="Button_OK.Text" xml:space="preserve">
    <value>了解</value>
  </data>
  <data name="RadioButton_Partial.Text" xml:space="preserve">
    <value>部分公平</value>
  </data>
  <data name="Button_Cancel.Text" xml:space="preserve">
    <value>取り消し</value>
  </data>
  <data name="RadioButton_FairEvent.Text" xml:space="preserve">
    <value>弱公平</value>
  </data>
  <data name="RadioButton_FairEvent.ToolTip" xml:space="preserve">
    <value>弱ライブイベントは弱公平イベントより強い概念です。 参考:[SunLD08a]。</value>
  </data>
  <data name="RadioButton_SL.Text" xml:space="preserve">
    <value>公平性を伴わない</value>
  </data>
  <data name="CheckBox_HasThink.ToolTip" xml:space="preserve">
    <value>全ての哲学者は最初に考えるかフォークを持つことと選ぶかもしれません</value>
  </data>
  <data name="Label_CreatedBy.Text" xml:space="preserve">
    <value>サンプル作成者:</value>
  </data>
  <data name="RadioButton_WL.Text" xml:space="preserve">
    <value>公平性を伴う</value>
  </data>
  <data name="$this.Text" xml:space="preserve">
    <value>タイトル</value>
    <comment>finish</comment>
  </data>
  <data name="RadioButton_AllFair.Text" xml:space="preserve">
    <value>全公平</value>
  </data>
  <data name="RadioButton_AllFair.ToolTip" xml:space="preserve">
    <value>このオプションは全てのイベントが公平です。そしてその結果として処理レベルの公平さが達成されています。</value>
  </data>
  <data name="RadioButton_LiveEvent.Text" xml:space="preserve">
    <value>弱ライブ</value>
  </data>
  <data name="GroupBox_Options.Text" xml:space="preserve">
    <value>オプション</value>
  </data>
  <data name="Label_ThirdLabel.ToolTip" xml:space="preserve">
    <value>ユーザ数</value>
  </data>
  <data name="RadioButton_LiveEvent.ToolTip" xml:space="preserve">
    <value>弱ライブイベントは弱公平イベントより強い概念です。 参考:[SunLD08a]。</value>
  </data>
  <data name="Label_ThirdLabel.Text" xml:space="preserve">
    <value>ユーザ数:</value>
  </data>
  <data name="Label_To.ToolTip" xml:space="preserve">
    <value>プロセス数</value>
  </data>
  <data name="TextBox_Description.Text" xml:space="preserve">
    <value />
  </data>
  <data name="RadioButton_WL.ToolTip" xml:space="preserve">
    <value>このオプションではプロセスの実行の公平性を強制します</value>
  </data>
  <data name="CheckBox_HasThink.Text" xml:space="preserve">
    <value>Thinkイベント?</value>
  </data>
  <data name="groupBox1.Text" xml:space="preserve">
    <value>サンプルの情報</value>
  </data>
  <data name="Label_To.Text" xml:space="preserve">
    <value>プロセス数</value>
  </data>
</root>