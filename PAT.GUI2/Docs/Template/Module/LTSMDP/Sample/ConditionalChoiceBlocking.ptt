<#@ template language="C#" debug="False" hostspecific="true" #>
using System.Collections.Generic;
using PAT.Common.Classes.Expressions;
using PAT.Common.Classes.Expressions.ExpressionClass;
using PAT.Common.Classes.LTS;
using PAT.Common.Classes.Ultility;
using <# Write(this.Host.ResolveParameterValue("","","AssertionsNamespace")); #>;

namespace <# Write(this.Host.ResolveParameterValue("","","LTSNamespace")); #>
{
    public sealed class ConditionalChoiceBlocking : Process
    {
        public Process FirstProcess;
        public Expression ConditionalExpression;


        public ConditionalChoiceBlocking(Process firstProcess, Expression conditionExpression)
        {
            FirstProcess = firstProcess;
            ConditionalExpression = conditionExpression;

            ProcessID = DataStore.DataManager.InitializeProcessID(FirstProcess.ProcessID + Constants.CONDITIONAL_CHOICE + conditionExpression.ExpressionID);
        }

        public override List<Configuration> MoveOneStep(Configuration eStep)
        {
            List<Configuration> returnList = new List<Configuration>(1);
            ExpressionValue v = EvaluatorDenotational.Evaluate(ConditionalExpression, eStep.GlobalEnv);

            if ((v as BoolConstant).Value)
            {
                Configuration config = new Configuration(FirstProcess, Constants.TAU, null, eStep.GlobalEnv, false, 1, -1);
                returnList.Add(config);
            }

            return returnList;
        }

        public override string ToString()
        {
            return "ifb " + ConditionalExpression + " {" + FirstProcess.ToString() + "}";
        }

        public override HashSet<string> GetAlphabets(Dictionary<string, string> visitedDefinitionRefs)
        {
            return FirstProcess.GetAlphabets(visitedDefinitionRefs);
        }

        public override List<string> GetGlobalVariables()
        {
            List<string> Variables = FirstProcess.GetGlobalVariables();
            Common.Classes.Ultility.Ultility.AddList(Variables, ConditionalExpression.GetVars());
            return Variables;
        }

        public override List<string> GetChannels()
        {
            return FirstProcess.GetChannels();
        }


        public override Process ClearConstant(Dictionary<string, Expression> constMapping)
        {
            Expression newCon = ConditionalExpression.ClearConstant(constMapping);
            Process newFirstProc = FirstProcess.ClearConstant(constMapping);
            
            return new ConditionalChoiceBlocking(newFirstProc, newCon);
        }

        public override bool MustBeAbstracted()
        {
            return FirstProcess.MustBeAbstracted();
        }

        public override bool IsProbabilistic()
        {
            return FirstProcess.IsProbabilistic();
        }        
    }
}