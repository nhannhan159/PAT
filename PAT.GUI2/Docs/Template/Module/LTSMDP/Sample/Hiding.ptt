<#@ template language="C#" debug="False" hostspecific="true" #>
using System.Collections.Generic;
using PAT.Common.Classes.Expressions.ExpressionClass;
using PAT.Common.Classes.LTS;
using PAT.Common.Classes.Ultility;
using <# Write(this.Host.ResolveParameterValue("","","AssertionsNamespace")); #>;

namespace <# Write(this.Host.ResolveParameterValue("","","LTSNamespace")); #>
{
    public sealed class Hiding : Process
    {
        public Process Process;
        public EventCollection HidingAlphabets;

        public Hiding(Process process, EventCollection alphabets)
        {
            if (process is Hiding)
            {
                Process = (process as Hiding).Process;
                List<Event> events = new List<Event>((process as Hiding).HidingAlphabets);
                
                foreach (Event item in alphabets)
                {
                    if (!events.Contains(item))
                    {
                        events.Add(item);
                    }
                }

                HidingAlphabets = new EventCollection(events);        
            }
            else {
                Process = process;
                HidingAlphabets = alphabets;
            }

            ProcessID = DataStore.DataManager.InitializeProcessID(Constants.HIDING + Process.ProcessID + Constants.SEPARATOR + HidingAlphabets.ProcessID); 
        }

        public override List<Configuration> MoveOneStep(Configuration eStep)
        {            
            List<Configuration> returnlist = Process.MoveOneStep(eStep);
            for (int i = 0; i < returnlist.Count; i++)
            {
                Configuration step = returnlist[i];

                if (HidingAlphabets.ContainEventName(step.Event))
                {
                    step.DisplayName = step.Event;
                    step.Event = Constants.TAU;
                    
                }

                Hiding newHide = new Hiding(step.Process, HidingAlphabets);

                step.Process = newHide;                      
                returnlist[i] = step;
            }

            return returnlist;
        }

        public override List<ConfigurationWithChannelData> SyncOutput(Configuration eStep)
        {
            List<ConfigurationWithChannelData> returnlist = Process.SyncOutput(eStep);

            for (int i = 0; i < returnlist.Count; i++)
            {
                Configuration step = returnlist[i];
                step.Process = new Hiding(step.Process, HidingAlphabets);
            }

            return returnlist;
        }

        public override List<Configuration> SyncInput(ConfigurationWithChannelData eStep)
        {
            List<Configuration> returnlist = Process.SyncInput(eStep);
            for (int i = 0; i < returnlist.Count; i++)
            {
                returnlist[i].Process = new Hiding(returnlist[i].Process, HidingAlphabets);
            }

            return returnlist;
        }

        public override string ToString()
        {
            return "(" + Process.ToString() + " \\ {" + Common.Classes.Ultility.Ultility.PPStringList(HidingAlphabets) + "})";
        }

        public override HashSet<string> GetAlphabets(Dictionary<string, string> visitedDefinitionRefs)
        {
            HashSet<string> returnlist = Process.GetAlphabets(visitedDefinitionRefs);
            foreach (string alphabet in HidingAlphabets.EventNames)
            {
                returnlist.Remove(alphabet);
            }    
            //int counter = 0;
            //while (counter < returnlist.Count)
            //{
            //    string step = returnlist[counter];
            //    if (HidingAlphabets.ContainEventName(step))
            //    {
            //        returnlist.Remove(step);
            //    }
            //    else
            //    {
            //        counter++;
            //    }
            //}
            return returnlist;
        }

        public override List<string> GetGlobalVariables()
        {
            return Process.GetGlobalVariables();
        }

        public override List<string> GetChannels()
        {
            return Process.GetChannels();
        }

        public override Process ClearConstant(Dictionary<string, Expression> constMapping)
        {
            return new Hiding(Process.ClearConstant(constMapping), HidingAlphabets.ClearConstant(constMapping));
        }

        public override bool MustBeAbstracted()
        {
            return Process.MustBeAbstracted();
        }

        public override bool IsProbabilistic()
        {
            return Process.IsProbabilistic();
        }

        public override Process GetTopLevelConcurrency(List<string> visitedDef)
        {
            return Process.GetTopLevelConcurrency(visitedDef);
        }
    }
}