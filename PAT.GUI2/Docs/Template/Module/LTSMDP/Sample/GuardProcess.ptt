<#@ template language="C#" debug="False" hostspecific="true" #>
using System.Text;
using System.Collections.Generic;
using PAT.Common.Classes.Expressions;
using PAT.Common.Classes.Expressions.ExpressionClass;
using PAT.Common.Classes.LTS;
using <# Write(this.Host.ResolveParameterValue("","","AssertionsNamespace")); #>;

namespace <# Write(this.Host.ResolveParameterValue("","","LTSNamespace")); #>
{
    public sealed class GuardProcess : Process
    {
        public Process Process;
        public Expression Condition;

        public GuardProcess(Process process, Expression cond)
        {
            Process = process;
            Condition = cond;

            StringBuilder ID = new StringBuilder();
            ID.Append("[");
            ID.Append(DataStore.DataManager.InitializeProcessID(cond.ExpressionID));
            ID.Append("]");
            ID.Append(Process.ProcessID);

            ProcessID = DataStore.DataManager.InitializeProcessID(ID.ToString());
        }

        public override List<string> GetGlobalVariables()
        {
            List<string> Variables = Process.GetGlobalVariables();
            Common.Classes.Ultility.Ultility.AddList(Variables, Condition.GetVars());
            return Variables;
        }

        public override List<string> GetChannels()
        {
            return Process.GetChannels();
        }

        public override List<Configuration> MoveOneStep(Configuration eStep)
        {
            ExpressionValue v = EvaluatorDenotational.Evaluate(Condition, eStep.GlobalEnv);

            if ((v as BoolConstant).Value)
            {
                return Process.MoveOneStep(eStep);
            }

            return new List<Configuration>(0);
        }

        public override List<ConfigurationWithChannelData> SyncOutput(Configuration eStep)
        {
            ExpressionValue v = EvaluatorDenotational.Evaluate(Condition, eStep.GlobalEnv);

            if ((v as BoolConstant).Value)
            {
                return Process.SyncOutput(eStep);
            }

            return new List<ConfigurationWithChannelData>(0);
        }

        public override List<Configuration> SyncInput(ConfigurationWithChannelData eStep)
        {
            ExpressionValue v = EvaluatorDenotational.Evaluate(Condition, eStep.GlobalEnv);

            if ((v as BoolConstant).Value)
            {
                return Process.SyncInput(eStep);
            }

            return new List<Configuration>(0);
        }

        public override string ToString()
        {
            return "([" + Condition + "]" + Process.ToString() + ")";
        }

        public override HashSet<string> GetAlphabets(Dictionary<string, string> visitedDefinitionRefs)
        {
            return Process.GetAlphabets(visitedDefinitionRefs);
        }

        public override Process ClearConstant(Dictionary<string, Expression> constMapping)
        {
            Expression newCon = Condition.ClearConstant(constMapping);

            return new GuardProcess(Process.ClearConstant(constMapping), newCon);
        }

        public override bool MustBeAbstracted()
        {
            return Process.MustBeAbstracted();
        }

        public override bool IsProbabilistic()
        {
            return Process.IsProbabilistic();
        }    
    }
}