<#@ template language="C#" debug="False" hostspecific="true" #>
using System.Collections.Generic;
using PAT.Common.Classes.Expressions;
using PAT.Common.Classes.Expressions.ExpressionClass;
using PAT.Common.Classes.LTS;
using PAT.Common.Classes.Ultility;
using <# Write(this.Host.ResolveParameterValue("","","AssertionsNamespace")); #>;

namespace <# Write(this.Host.ResolveParameterValue("","","LTSNamespace")); #>
{
    public sealed class ConditionalChoiceAtomic : Process
    {
        public Process FirstProcess;
        public Process SecondProcess;
        public Expression ConditionalExpression;

        public ConditionalChoiceAtomic(Process firstProcess, Process secondProcess, Expression conditionExpression)
        {
            FirstProcess = firstProcess;
            SecondProcess = secondProcess;
            ConditionalExpression = conditionExpression;

            ProcessID = DataStore.DataManager.InitializeProcessID(FirstProcess.ProcessID + Constants.CONDITIONAL_CHOICE + conditionExpression.ExpressionID  + Constants.CONDITIONAL_CHOICE + SecondProcess.ProcessID);
        }

        public override List<Configuration> MoveOneStep(Configuration eStep)
        {
            ExpressionValue v = EvaluatorDenotational.Evaluate(ConditionalExpression, eStep.GlobalEnv);

            if ((v as BoolConstant).Value)
            {
                return FirstProcess.MoveOneStep(eStep);
            }

            return SecondProcess.MoveOneStep(eStep);
        }

        public override List<ConfigurationWithChannelData> SyncOutput(Configuration eStep)
        {
            ExpressionValue v = EvaluatorDenotational.Evaluate(ConditionalExpression, eStep.GlobalEnv);

            if ((v as BoolConstant).Value)
            {
                return FirstProcess.SyncOutput(eStep);
            }

            return SecondProcess.SyncOutput(eStep);
        }

        public override List<Configuration> SyncInput(ConfigurationWithChannelData eStep)
        {
            ExpressionValue v = EvaluatorDenotational.Evaluate(ConditionalExpression, eStep.GlobalEnv);

            if ((v as BoolConstant).Value)
            {
                return FirstProcess.SyncInput(eStep);
            }

            return SecondProcess.SyncInput(eStep);
        }

        public override string ToString()
        {
            return "ifa " + ConditionalExpression + " {" + FirstProcess.ToString() + "} else {" + SecondProcess.ToString() + "}";
        }

        public override HashSet<string> GetAlphabets(Dictionary<string, string> visitedDefinitionRefs)
        {
            HashSet<string> list = SecondProcess.GetAlphabets(visitedDefinitionRefs);
            list.UnionWith(FirstProcess.GetAlphabets(visitedDefinitionRefs));
            return list;
        }

        public override List<string> GetGlobalVariables()
        {
            List<string> Variables = SecondProcess.GetGlobalVariables();
            Common.Classes.Ultility.Ultility.AddList(Variables, FirstProcess.GetGlobalVariables());
            Common.Classes.Ultility.Ultility.AddList(Variables, ConditionalExpression.GetVars());            
            return Variables;
        }

        public override List<string> GetChannels()
        {
            List<string> channels = SecondProcess.GetChannels();
            Common.Classes.Ultility.Ultility.AddList(channels, FirstProcess.GetChannels());

            return channels;
        }

        public override Process ClearConstant(Dictionary<string, Expression> constMapping)
        {
            Expression newCon = ConditionalExpression.ClearConstant(constMapping);

            Process newFirstProc = FirstProcess.ClearConstant(constMapping);
            Process newSecondProc = SecondProcess.ClearConstant(constMapping);

            return new ConditionalChoiceAtomic(newFirstProc, newSecondProc, newCon);
        }

        public override bool MustBeAbstracted()
        {
            return FirstProcess.MustBeAbstracted() || SecondProcess.MustBeAbstracted();
        }

        public override bool IsProbabilistic()
        {
            return FirstProcess.IsProbabilistic() || SecondProcess.IsProbabilistic();
        }
    }
}