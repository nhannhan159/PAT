<#@ template language="C#" debug="False" hostspecific="true" #>
using System.Collections.Generic;
using PAT.Common.Classes.Expressions;
using PAT.Common.Classes.Expressions.ExpressionClass;
using PAT.Common.Classes.Ultility;
using <# Write(this.Host.ResolveParameterValue("","","AssertionsNamespace")); #>;

namespace <# Write(this.Host.ResolveParameterValue("","","LTSNamespace")); #>
{
    public sealed class Assertion : Process
    {
        public Expression ConditionalExpression;
        public int LineNumber;

        public Assertion(Expression conditionExpression, int line)
        {
            ConditionalExpression = conditionExpression;
            LineNumber = line;
            ProcessID = DataStore.DataManager.InitializeProcessID(Constants.ASSERTION + conditionExpression.ExpressionID);
        }

        public override List<Configuration> MoveOneStep(Configuration eStep)
        {
            List<Configuration> returnList = new List<Configuration>(1);

            ExpressionValue v = EvaluatorDenotational.Evaluate(ConditionalExpression, eStep.GlobalEnv);

            if ((v as BoolConstant).Value)
            {
                Configuration config = new Configuration(new Stop(), Constants.TERMINATION, null, eStep.GlobalEnv, false, 1, -1);
                returnList.Add(config);
            }
            else
            {
                throw new RuntimeException("Assertion at line " + LineNumber + " failed: " + ConditionalExpression.ToString());
            }

            return returnList;
        }

        public override string ToString()
        {
            return " assert(" + ConditionalExpression + ")";
        }

        public override List<string> GetGlobalVariables()
        {
            return ConditionalExpression.GetVars();
        }

        public override Process ClearConstant(Dictionary<string, Expression> constMapping)
        {
            Expression newCon = ConditionalExpression.ClearConstant(constMapping);

            return new Assertion(newCon, LineNumber);
        }
    }
}